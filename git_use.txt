1.安装Git
	a)在windows上安装
		Ⅰ.直接在官网上(https://git-scm.com/downloads)下载安装程序，然后默认选项安装即可
		Ⅱ.安装完成后，在开始菜单找到Git Bash，点击后出现命令行窗口，表明Git安装成功
		Ⅲ.安装完成后还需要进一步设置，在命令行输入：
			$ git config --global user.name "Your Name"
			$ git config --global user.email "email@example.com"

2.创建版本库(repository)
	a)选择一个合适的目录，创建一个空目录。目录路径尽量不要包含中文
	b)进入目录，使用命令：git init，把这个目录变成Git可以管理的仓库，此时会生成一个.git的文件夹
	c) 把文件添加到版本库
		Ⅰ.命令：git add <file> 把文件添加到仓库
		Ⅱ.命令：git commit -m <message> 可以把多个文件一次提交到仓库

3.时光机穿梭
	a)命令：git status 可以让我们时刻掌握仓库当前的状态
	b)命令：git diff <file>可以查看该文件与仓库里的文件的difference
	c)命令：git log可以显示从最近到最远的 commit 日志，git log --pretty=oneline，简略显示
	d)命令：git reset --hard head^，回退到上个版本，要是回退6版本可以使用head~6
	e)命令：git reset --hard id, 回到到指定的commit id的版本，用于版本之间的穿梭
	f)命令：git reflog 记录你的每一次命令

4.工作区和暂存区
	a)工作区：就是我们电脑里能看到的目录，比如gitlearn
	b)暂存区：在Git版本库里存放，称为stage或者index
	c)版本库：工作区有一个隐藏目录.git，是Git的版本库
	d)把文件往Git版本库里添加分两步执行
		Ⅰ.用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
		Ⅱ.用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。

5.管理修改
	a)修改一个文件->git add file->再次修改该文件->git commit,commit的其实是第一次修改的内容
	  要想commit第二次修改后的file，需要再次git add file->git commit。正确的流程应该是
	  修改->git add file->修改->git add file->git commit
	b)撤销修改
		Ⅰ.git checkout -- <file>
			工作区文件修改后还没有被放到暂存区，把在工作区对文件做的修改全部撤销，文件内容回到与版本库中一样
		Ⅱ.git reset HEAD <file>
			对文件做了修改，并把文件添加到暂存区，把暂存区的修改回退到工作区,回到了Ⅰ
		Ⅲ.时光机版本回退
			对文件做了修改，并提交到版本库
	c)删除文件，将文件在目录里删除后
		Ⅰ.你确定要从版本库中删除该文件
			git rm 然后 git commit
		Ⅱ.不小心删错了，可以从版本库中找回
			git checkout -- <file>

6.远程仓库
	1）创建SSH Key：ssh-keygen -t rsa -C "youremail@example.com"，在主目录生成一个.ssh目录
	2）登陆GitHub，打开Account settings->SSH and GPG keys->New SSH key->填写Title->
	  将生成的rsa公钥粘贴到Key->最后点击Add SSH key就完成了
	a)添加远程库
		1）Create a new repo
		2）在Repository name中填入名称
		3）点击“Create repository”按钮完成创建
		4）在本地的仓库下运行命令
			git remote add origin git@github.com:yourname/repositoryname.git
		5）把本地库的所有内容推送到远程库上
			git push -u origin master
		6）后面的跟新就不需要加上 -u 了
			git push origin master
	b)从远程库克隆
		git clone git@github.com:michaelliao/gitskills.git

7.分支管理
	1）创建与合并分支
		命令：git checkout -b dev 创建dev分支，然后切换到dev分支，这个命令相当于两条命令
		命令：git branch dev 创建分支dev
		命令：git checkout dev 切换分支到dev
		命令：git branch 查看当前分支
		命令：git merge dev 合并dev分支到当前分支
		命令：git branch -d dev 删除分支dev	
	2）解决冲突
		当两个分支修改同一个文件后，合并分支就是导致冲突
		解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
		命令：git log --graph --pretty=oneline(一个commit在一行显示) --abbrev-commit(缩略commit id) 以简略的可视化的方式展示分支合并的情形	
	3）分支管理策略
		命令：git merge --no-ff -m <message> dev 加上no-ff可以保留被合并的分支的commit
		保留合并的分支意味着还能再用这个分支，如不保留，则找不到这个分支了，因为他已经与主分支合并了
	4）Bug分支
		命令：git stash 把当前工作现场“存储”起来，等以后恢复现场后继续工作
		命令：git stash list 查看保存的现场
		命令：git stash pop 把工作现场恢复的同时删除stash内容
		命令：git stash apply， git stash drop 两条命令同上一条
		命令：gitstash apply stash@｛0｝ 恢复指定的工作现场
		命令：git cherry-pick <commit> 把commit这个提交做作的修改“复制到其他分支”，注意：只是这次提交所做的修改
	5）Feature分支
		命令：git branch -D dev 强行删除还未合并的分支
	6）多人协作
		命令：git remote 返回远程仓库的名称，默认为origin， git remote -v 显示更详细信息，包括仓库fetch和push地址
		命令：git push origin dev 推送分支，可以是master，也可以是dev等分支
		命令：git checkout -b dev origin/dev 多人协作中创建远程origin的dev分支到本地，前提是clone了origin，目前分支是master
		多人协作中，两人修改了同一个文件，且你在后面推送会冲突，解决办法如下：
			命令：git branch --set-upstream-to=origin/dev dev 指定本地dev分支与远程origin/dev分支的链接
			命令：git pull 把最新的提交从origin/dev抓下来
			抓下来后，与本地的dev合并有冲突，解决方法见7.2
			命令：git push origin dev
	7）Rebase
		命令：git rebase 把本地未push的分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了

8.标签管理
	1）创建标签
		命令：git tag <tagname> 创建一个新标签，默认打在最新commit的标签上
		命令：git tag <tagname> <commit> 指定标签所对应的commit
		命令：git tag 查看所有标签，标签是按字符顺序排列
		命令：git show <tagname> 查看标签信息
		命令：git tag -a <tagname> -m <message> <commit>
	2）操作标签
		命令：git tag -d <tagname> 删除标签
		命令：git push origin <tagname> 推送标签到远程
		命令：git push origin --tags 一次推送所有未被推送到远程的标签
		删除远程标签
			先在本地删除
			命令：git push origin :refs/tags/<tagname> 远程删除
